(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>A});var a=t(15),r=t.n(a),o=t(645),i=t.n(o)()(r());i.push([n.id,"/* Reset */\n* {\n  margin: 0;\n  padding: 0;\n  font-family: 'Montserrat', sans-serif;\n}\n\na {\n  text-decoration: none;\n  color: inherit;\n}\n\nli {\n  list-style-type: none;\n}\n\nbutton {\n  cursor: pointer;\n  border: none;\n  background-color: transparent;\n  color: white;\n}\n\nbutton:hover {\n  opacity: 0.9;\n}\n\nbutton:active {\n  opacity: 0.6;\n}\n\n.primary-button {\n  height: 48px;\n  background-color: #d57d1f;\n  font-weight: bold;\n  font-size: 16px;\n  color: #000;\n}\n\n/* Default Layout */\n#root {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.app-bar {\n  position: fixed;\n  width: 100%;\n  top: 0;\n  left: 0;\n  height: 80px;\n}\n\n.app-body {\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  margin-top: 80px;\n  align-items: center;\n}\n\n.app-footer {\n  padding: 16px;\n}\n\n.navbar {\n  display: flex;\n  align-items: center;\n  margin: 0 16px;\n  height: 100%;\n  gap: 40px;\n}\n\n.nav {\n  display: flex;\n  gap: 20px;\n}\n\n.logo {\n  height: 40px;\n}\n\n/* Colors */\n.bg-primary {\n  background-color: #2d2013;\n}\n\n.bg-primary-dark {\n  background-color: #23180d;\n}\n\n.text-white {\n  color: white;\n}\n\n/* Meals */\n\n.grid {\n  display: grid;\n  grid-template-columns: auto auto auto;\n  grid-auto-rows: 1fr;\n  grid-column-gap: 40px;\n  grid-row-gap: 80px;\n  width: 80%;\n  justify-items: center;\n}\n\n.card {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.card-body {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.card-image {\n  width: 100%;\n  height: 100%;\n}\n\n.card-buttons {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  gap: 16px;\n}\n\n.like-button {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  min-width: max-content;\n}\n\n/* Modal */\n.modal,\n.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 999;\n  background-color: transparent;\n}\n\n.modal {\n  overflow: auto;\n}\n\n.overlay {\n  background-color: #2d2013;\n  mix-blend-mode: multiply;\n}\n\n#modal-content {\n  display: flex;\n  flex-direction: column;\n  width: 50%;\n  margin: auto;\n  padding: 40px;\n  gap: 40px;\n}\n\n.modal-close-button {\n  position: fixed;\n  right: 0;\n  top: 0;\n  margin: 48px;\n}\n\n.scroll-off {\n  overflow: hidden;\n}\n\n.fs-large {\n  font-size: 72px;\n}\n\n.blur {\n  filter: blur(24px);\n}\n\n/* Comments */\n.details {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.details img {\n  height: 400px;\n}\n\n.meal-info {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1fr 1fr;\n  gap: 15px;\n}\n\n.details h2 {\n  margin: 1rem 0;\n}\n\n.details h3 {\n  margin: 2rem 0 1rem;\n  align-self: center;\n  text-align: center;\n}\n\n.meal-info span {\n  margin: 1rem 0 0.5rem;\n}\n\n.meal-info a {\n  text-decoration: underline;\n}\n\n.label {\n  color: #d57d1f;\n}\n\n.comment-line {\n  padding: 5px;\n}\n\n.comment-line span {\n  margin-right: 10px;\n}\n\nform {\n  width: 50%;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\ninput,\ntextarea {\n  padding: 0.5rem 1rem;\n  font-size: 1rem;\n  resize: none;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,UAAU;AACV;EACE,SAAS;EACT,UAAU;EACV,qCAAqC;AACvC;;AAEA;EACE,qBAAqB;EACrB,cAAc;AAChB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,6BAA6B;EAC7B,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,yBAAyB;EACzB,iBAAiB;EACjB,eAAe;EACf,WAAW;AACb;;AAEA,mBAAmB;AACnB;EACE,iBAAiB;EACjB,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,eAAe;EACf,WAAW;EACX,MAAM;EACN,OAAO;EACP,YAAY;AACd;;AAEA;EACE,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,YAAY;EACZ,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,cAAc;EACd,YAAY;EACZ,SAAS;AACX;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,YAAY;AACd;;AAEA,WAAW;AACX;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,YAAY;AACd;;AAEA,UAAU;;AAEV;EACE,aAAa;EACb,qCAAqC;EACrC,mBAAmB;EACnB,qBAAqB;EACrB,kBAAkB;EAClB,UAAU;EACV,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,WAAW;EACX,YAAY;AACd;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,SAAS;AACX;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,sBAAsB;AACxB;;AAEA,UAAU;AACV;;EAEE,eAAe;EACf,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,YAAY;EACZ,6BAA6B;AAC/B;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,yBAAyB;EACzB,wBAAwB;AAC1B;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,UAAU;EACV,YAAY;EACZ,aAAa;EACb,SAAS;AACX;;AAEA;EACE,eAAe;EACf,QAAQ;EACR,MAAM;EACN,YAAY;AACd;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;;AAEA,aAAa;AACb;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,2BAA2B;EAC3B,SAAS;AACX;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,mBAAmB;EACnB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,UAAU;EACV,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;;EAEE,oBAAoB;EACpB,eAAe;EACf,YAAY;AACd",sourcesContent:["/* Reset */\n* {\n  margin: 0;\n  padding: 0;\n  font-family: 'Montserrat', sans-serif;\n}\n\na {\n  text-decoration: none;\n  color: inherit;\n}\n\nli {\n  list-style-type: none;\n}\n\nbutton {\n  cursor: pointer;\n  border: none;\n  background-color: transparent;\n  color: white;\n}\n\nbutton:hover {\n  opacity: 0.9;\n}\n\nbutton:active {\n  opacity: 0.6;\n}\n\n.primary-button {\n  height: 48px;\n  background-color: #d57d1f;\n  font-weight: bold;\n  font-size: 16px;\n  color: #000;\n}\n\n/* Default Layout */\n#root {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.app-bar {\n  position: fixed;\n  width: 100%;\n  top: 0;\n  left: 0;\n  height: 80px;\n}\n\n.app-body {\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  margin-top: 80px;\n  align-items: center;\n}\n\n.app-footer {\n  padding: 16px;\n}\n\n.navbar {\n  display: flex;\n  align-items: center;\n  margin: 0 16px;\n  height: 100%;\n  gap: 40px;\n}\n\n.nav {\n  display: flex;\n  gap: 20px;\n}\n\n.logo {\n  height: 40px;\n}\n\n/* Colors */\n.bg-primary {\n  background-color: #2d2013;\n}\n\n.bg-primary-dark {\n  background-color: #23180d;\n}\n\n.text-white {\n  color: white;\n}\n\n/* Meals */\n\n.grid {\n  display: grid;\n  grid-template-columns: auto auto auto;\n  grid-auto-rows: 1fr;\n  grid-column-gap: 40px;\n  grid-row-gap: 80px;\n  width: 80%;\n  justify-items: center;\n}\n\n.card {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.card-body {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.card-image {\n  width: 100%;\n  height: 100%;\n}\n\n.card-buttons {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  gap: 16px;\n}\n\n.like-button {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  min-width: max-content;\n}\n\n/* Modal */\n.modal,\n.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 999;\n  background-color: transparent;\n}\n\n.modal {\n  overflow: auto;\n}\n\n.overlay {\n  background-color: #2d2013;\n  mix-blend-mode: multiply;\n}\n\n#modal-content {\n  display: flex;\n  flex-direction: column;\n  width: 50%;\n  margin: auto;\n  padding: 40px;\n  gap: 40px;\n}\n\n.modal-close-button {\n  position: fixed;\n  right: 0;\n  top: 0;\n  margin: 48px;\n}\n\n.scroll-off {\n  overflow: hidden;\n}\n\n.fs-large {\n  font-size: 72px;\n}\n\n.blur {\n  filter: blur(24px);\n}\n\n/* Comments */\n.details {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.details img {\n  height: 400px;\n}\n\n.meal-info {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1fr 1fr;\n  gap: 15px;\n}\n\n.details h2 {\n  margin: 1rem 0;\n}\n\n.details h3 {\n  margin: 2rem 0 1rem;\n  align-self: center;\n  text-align: center;\n}\n\n.meal-info span {\n  margin: 1rem 0 0.5rem;\n}\n\n.meal-info a {\n  text-decoration: underline;\n}\n\n.label {\n  color: #d57d1f;\n}\n\n.comment-line {\n  padding: 5px;\n}\n\n.comment-line span {\n  margin-right: 10px;\n}\n\nform {\n  width: 50%;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n}\n\ninput,\ntextarea {\n  padding: 0.5rem 1rem;\n  font-size: 1rem;\n  resize: none;\n}\n"],sourceRoot:""}]);const A=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,a){"string"==typeof n&&(n=[[null,n,""]]);var r={};if(a)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(var A=0;A<n.length;A++){var s=[].concat(n[A]);a&&r[s[0]]||(t&&(s[2]?s[2]="".concat(t," and ").concat(s[2]):s[2]=t),e.push(s))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,a=new Array(e);t<e;t++)a[t]=n[t];return a}n.exports=function(n){var t,a,r=(a=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=t){var a,r,o=[],i=!0,A=!1;try{for(t=t.call(n);!(i=(a=t.next()).done)&&(o.push(a.value),!e||o.length!==e);i=!0);}catch(n){A=!0,r=n}finally{try{i||null==t.return||t.return()}finally{if(A)throw r}}return o}}(t,a)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var a=Object.prototype.toString.call(n).slice(8,-1);return"Object"===a&&n.constructor&&(a=n.constructor.name),"Map"===a||"Set"===a?Array.from(n):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?e(n,t):void 0}}(t,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[1],i=r[3];if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),l="/*# ".concat(s," */"),c=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[o].concat(c).concat([l]).join("\n")}return[o].join("\n")}},695:n=>{var e={};n.exports=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}},379:n=>{var e=[];function t(n){for(var t=-1,a=0;a<e.length;a++)if(e[a].identifier===n){t=a;break}return t}function a(n,a){for(var o={},i=[],A=0;A<n.length;A++){var s=n[A],l=a.base?s[0]+a.base:s[0],c=o[l]||0,d="".concat(l," ").concat(c);o[l]=c+1;var p=t(d),m={css:s[1],media:s[2],sourceMap:s[3]};-1!==p?(e[p].references++,e[p].updater(m)):e.push({identifier:d,updater:r(m,a),references:1}),i.push(d)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var o=a(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var A=t(o[i]);e[A].references--}for(var s=a(n,r),l=0;l<o.length;l++){var c=t(o[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}o=s}}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e),e}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var a=t.css,r=t.media,o=t.sourceMap;r?n.setAttribute("media",r):n.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(a,n)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},610:(n,e,t)=>{n.exports=t.p+"7d243edf052a9de2a6d2.png"}},e={};function t(a){var r=e[a];if(void 0!==r)return r.exports;var o=e[a]={id:a,exports:{}};return n[a](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var a in e)t.o(e,a)&&!t.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:e[a]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var a=e.getElementsByTagName("script");a.length&&(n=a[a.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),(()=>{const n="https://www.themealdb.com/api/json/v1/1",e="https://us-central1-involvement-api.cloudfunctions.net/capstoneApi/",a=async(n,t={})=>await fetch(`${e}${n}`,{method:"POST",body:JSON.stringify(t),headers:{"Content-type":"application/json; charset=UTF-8"}}),r=async()=>{const t=await(async()=>{let n=localStorage.getItem("appId");if(!n){const e=await a("apps/");n=await e.text(),localStorage.setItem("appId",n)}return n})(),r=await(async()=>{const e=await fetch(`${n}/search.php?f=b`),{meals:t}=await e.json();return t})(),o=await(async n=>{const t=await fetch(`${e}apps/${n}/likes`);try{return await t.json()}catch(n){return[]}})(t),i=r.map((({idMeal:n,strMeal:e,strMealThumb:t})=>({id:n,name:e,src:t})));o.forEach((n=>{const e=i.find((e=>`${e.id}`===n.item_id));e&&(e.likes=n.likes)})),(({meals:n=[],likeMeal:e,onPressCommentsButton:t})=>{const a=document.querySelector("main");document.getElementById("meal-counter").innerText=n.length;const r=document.createElement("div");r.classList.add("grid"),n.forEach((({id:n,name:a,src:o,likes:i=0})=>{const A=document.createElement("div");A.classList.add("card"),A.innerHTML=`\n            <img src=${o} alt="" class="card-image" />\n            <div class="card-body">\n                <div class="card-header">\n                    <h4>${a}</h4>\n                    <div class="like-button">\n                        <button data-id="like-meal">\n                            <span class="material-icons">favorite_border</span>\n                        </button>\n                        <p><span data-id="likes">${i}</span> Likes</p>\n                    </div>\n                </div>\n                <div class="card-buttons">\n                    <button data-id="comments" class="primary-button">Comments</button>\n                    <button data-id="reservations" class="primary-button">Reservations</button>\n                </div>\n            </div>\n        `;const s=A.querySelector('[data-id="comments"]'),l=A.querySelector('[data-id="like-meal"]'),c=A.querySelector('[data-id="likes"]');s.addEventListener("click",(()=>{(()=>{const n=document.createElement("div");n.classList.add("text-white"),n.innerHTML='\n    <div class="overlay"></div>\n    <div class="modal">\n      <div id="modal-content"></div>\n      <button data-id="close" class="modal-close-button">\n        <span class="material-icons text-white fs-large">close</span>\n      </button>\n    </div>\n  ';const e=document.getElementById("root");e.classList.add("blur"),n.querySelector('[data-id="close"]').addEventListener("click",(()=>{document.body.removeChild(n),e.classList.remove("blur"),document.body.classList.remove("scroll-off")})),document.body.classList.add("scroll-off"),document.body.appendChild(n)})(),t(n)})),l.addEventListener("click",(async()=>{await e(n)&&(c.innerText=Number.parseInt(c.innerText,10)+1)})),r.appendChild(A)})),a.appendChild(r)})({meals:i,likeMeal:n=>(async({appId:n,mealId:e})=>201===(await a(`apps/${n}/likes`,{item_id:e})).status)({appId:t,mealId:n}),onPressCommentsButton:r=>(async({mealId:t,appId:r})=>{const o=await(async e=>{const t=await fetch(`${n}/lookup.php?i=${e}`),{meals:a}=await t.json();return a[0]})(t),i=document.querySelector("#modal-content"),A=document.createElement("div");A.classList.add("details"),A.innerHTML=`\n    <img src='${o.strMealThumb}' class="details-image">\n    <h2>${o.strMeal}</h2>\n    <div class="meal-info">\n      <div><span class="label">Category: </span><span>${o.strCategory}</span></div>\n      <div><span class="label">Area: </span><span>${o.strArea}</span></div>\n      <div><span class="label">Recipe: </span><a href='${o.strSource}' target="blank">Recipe Link</a></div>\n      <div><span class="label">Video Instruction: </span><a href='${o.strYoutube}' target="blank">YouTube Link</a></div>\n    </div>\n    <div class="details">\n      <div class="comments">\n        <h3>Comments (<span id="comment-count">0</span>)</h3>\n        <ul id='comment-list'></ul>\n    </div>\n    </div>\n    <form>\n      <h3>Add a comment</h3>\n      <input type="text" placeholder='Your name' required>\n      <textarea id="text" name="text" rows="4" placeholder="Your insights" required></textarea>\n      <button type="submit" class="primary-button">Comment</button>\n    </form>\n   `;const s=async()=>{const n=await(async(n,t)=>{const a=await fetch(`${e}apps/${n}/comments?item_id=${t}`);return 400===a.status?[]:a.json()})(r,t);A.querySelector("#comment-count").innerText=((n=[])=>n.length)(n);const a=A.querySelector("ul");a.innerHTML="",n.forEach((n=>{const e=document.createElement("li");e.classList.add("comment-line"),e.innerHTML=`<span>${n.creation_date}</span> <span>${n.username}: ${n.comment}</span>`,a.appendChild(e)}))};i.append(A);const l=document.querySelector("form");l.addEventListener("submit",(async n=>{n.preventDefault();const e={item_id:t,username:n.target.children[1].value,comment:n.target.children[2].value};await(async({appId:n,mealId:e,data:t})=>{const r=`apps/${n}/comments?item_id=${e}`;return 201===(await a(r,t)).status})({appId:r,mealId:t,data:e})&&(await s(),l.reset(),n.target.children[1].focus())})),await s()})({mealId:r,appId:t})})};var o=t(379),i=t.n(o),A=t(795),s=t.n(A),l=t(695),c=t.n(l),d=t(216),p=t.n(d),m=t(426),u={styleTagTransform:function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}},setAttributes:function(n){var e=t.nc;e&&n.setAttribute("nonce",e)},insert:function(n){var e=c()("head");if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(n)}};u.domAPI=s(),u.insertStyleElement=p(),i()(m.Z,u),m.Z&&m.Z.locals&&m.Z.locals;const f=`\n<header class="app-bar bg-primary-dark text-white">\n  <nav class="navbar">\n    <a href="./"><img src=${t(610)} alt="" class="logo" /></a>\n    <ul class="nav">\n      <li><a href="#meals">Meals (<span id="meal-counter">0</span>)</a></li>\n      <li><a href="#categories">Categories</a></li>\n      <li><a href="#areas">Areas</a></li>\n    </ul>\n  </nav>\n</header>\n<main class="app-body bg-primary text-white">\n</main>\n<footer class="app-footer bg-primary-dark text-white">\n  Created by Microverse under CC license\n</footer>\n`;document.getElementById("root").innerHTML=f,window.addEventListener("load",(()=>r()))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,